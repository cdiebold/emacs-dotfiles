* Interface Tweaks
** Load newer bytecode
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
** No Backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)
#+END_SRC
** Enable ibuffer
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
#+END_SRC
** Enable winmove
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
   ; deletes all the whitespace when you hit backspace or delete
    (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
** Beacon mode - flashes cursor whenever you scroll
#+BEGIN_SRC emacs-lisp
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
#+END_SRC
* Magit - git magic
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
* Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))

#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC
* Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Reveal.js - Presentations in Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.6.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
    :init
      (global-undo-tree-mode))
#+END_SRC
* Try
#+BEGIN_SRC emacs-lisp
  (use-package try
	       :ensure t)
#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	       :ensure t
	       :config
	       (which-key-mode))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1))

  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Programming
** YasSnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
      (yas-global-mode 1))
#+END_SRC
** Flycheck - Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+END_SRC
** Company Mode - Autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

  (use-package company-irony
  :ensure t
  :config 
  (add-to-list 'company-backends 'company-irony))

  (use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package irony-eldoc
  :ensure t
  :config
  (add-hook 'irony-mode-hook #'irony-eldoc))

  (use-package company-jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC
** Elixir
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t)

  (use-package alchemist
    :ensure t)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
  :ensure t
  :config 
  (elpy-enable))
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t)

  (load-theme 'dracula t)
#+END_SRC
